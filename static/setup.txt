# make the FE plugin work with sb_accessiblecontent
tt_content.list.20.seminars_pi1 =< plugin.tx_seminars_pi1

plugin.tx_seminars {
	# Do not touch this variable! This is needed for checking whether this static template has been included correctly.
	isStaticTemplateLoaded = 1

	# Set this to 0 if you don't use the registration feature for this site and would like to disable the configuration check for this.
	enableRegistration = 1

	# whether the registration collision check should be skipped for all events
	skipRegistrationCollisionCheck = 0

	# location of the template file
	templateFile = EXT:seminars/Resources/Private/Templates/Mail/e-mail.html

	# whether to use formal or informal language
	salutation = formal

	# comma-separated list of section names that shouldn't be displayed in the thank-you e-mail to the user
	hideFieldsInThankYouMail = credit_points,billing_address,kids,planned_disclaimer

	# the CSS file for the HTML e-mail to the attendees
	cssFileForAttendeeMail = EXT:seminars/Resources/Private/CSS/thankYouMail.css

	# whether to use the label "Price" for the standard price (instead of "standard price") in e-mail to the participant
	generalPriceInMail = 0

	# Comma-separated list of section names from the registration that shouldn't be displayed in the notification e-mail to the organizers. These fields are the big blocks in that e-mail, and some are further divided.
	hideFieldsInNotificationMail =

	# comma-separated list of field names from seminars that should be mentioned in the notification e-mail to the organizers (in the "seminardata" section)
	showSeminarFieldsInNotificationMail = title,uid,event_type,date,place,price_regular,price_regular_early,price_special,price_special_early,attendees,vacancies,enough_attendees,is_full

	# comma-separated list of field names from fe_users that should be mentioned in the notification e-mail to the organizers  (in the "feuserdata" section)
	showFeUserFieldsInNotificationMail = username,name,email,address,zip,city,telephone

	# comma-separated list of field names from attendances that should be mentioned in the notification e-mail to the organizers  (in the "attendancedata" section)
	showAttendanceFieldsInNotificationMail = uid,price,seats,total_price,method_of_payment,gender,name,address,zip,city,country,telephone,email,interests,expectations,background_knowledge,known_from,notes

	# Whether to send the additional notification e-mails to the organizers or not. Additional notification mails are sent if for example an event gets full.
	sendAdditionalNotificationEmails = 1

	# Whether to send a notification to the organizers if a user has registered.
	sendNotification = 1

	# Whether to send a notification to the organizers if a user has unregistered.
	sendNotificationOnUnregistration = 1

	# Whether to send a notification to the organizers if someone registered for the queue.
	sendNotificationOnRegistrationForQueue = 1

	# Whether to send a notification to the organizers if the queue has been updated.
	sendNotificationOnQueueUpdate = 1

	# Whether to send a confirmation to the user after the user has registered.
	sendConfirmation = 1

	# Whether to send a confirmation to the user if the user has unregistered.
	sendConfirmationOnUnregistration = 1

	# Whether to send a confirmation to the user if the user has registered for the queue.
	sendConfirmationOnRegistrationForQueue = 1

	# Whether to send a confirmation to the user if the queue has been updated.
	sendConfirmationOnQueueUpdate = 1

	# Whether to add the CSV file of the registrations when sending the e-mail to the organizers.
	addRegistrationCsvToOrganizerMail = 0

	# the time format (in strftime format)
	timeFormat = %H:%M

	# the strftime format code to extract the year from a date string
	dateFormatY = %Y

	# the strftime format code to extract the month from a date string
	dateFormatM = %m.

	# the strftime format code to extract the day of month from a date string
	dateFormatD = %d.

	# the strftime format code for the full date
	dateFormatYMD = %d.%m.%Y

	# the strftime format code for the month and day of month
	dateFormatMD = %d.%m.

	# whether date ranges should be shortened when possible
	abbreviateDateRanges = 1

	# ISO3 code of the currency to be used (not checked for validity yet)
	currency = EUR

	# whether to also show the time of the registration deadline
	showTimeOfRegistrationDeadline = 0

	# whether to also show the time of the early bird deadline
	showTimeOfEarlyBirdDeadline = 0

	# whether to also show the time of the unregistration deadline
	showTimeOfUnregistrationDeadline = 0

	# Number of days before the start of an event until unregistration is possible. (If you want to disable this feature, just leave this value empty.)
	unregistrationDeadlineDaysBeforeBeginDate =

	# whether registration for events without a date should be possible
	allowRegistrationForEventsWithoutDate = 0

	# Whether unregistration is possible even when there are no registrations
	# on the waiting list yet.
	allowUnregistrationWithEmptyWaitingList = 0

	# If there are at least this many vancancies, "enough" is displayed instead of the exact number.
	showVacanciesThreshold = 10

	# number of digits after the point in event prices
	decimalDigits = 2

	# the character used to split the thousands in event prices
	thousandsSplitChar =

	# the character used to split the price and its decimal digits
	decimalSplitChar = .

	# whether events that have no standard price set should have "to be announced" as price instead of "free"
	showToBeAnnouncedForEmptyPrice = 0


	# whether anyone can access the CSV export function without any checks (use this for testing purposes only!)
	allowAccessToCsv = 0

	# the charset provided in the HTTP header for CSV export
	charsetForCsv = utf-8

	# the filename proposed for CSV export of event lists
	filenameForEventsCsv = events.csv

	# the filename proposed for CSV export of registration lists
	filenameForRegistrationsCsv = registrations.csv

	# comma-separated list of field names from tx_seminars_seminars that will be used for CSV export
	fieldsFromEventsForCsv = uid,title,subtitle,description,event_type,date,time,place,room,additional_times_places,speakers,price_regular,attendees,attendees_max,vacancies,is_full

	# comma-separated list of field names from fe_users that will be used for CSV export
	fieldsFromFeUserForCsv = name,company,address,zip,city,country,telephone,email

	# comma-separated list of field names from tx_seminars_attendances that will be used for CSV export
	fieldsFromAttendanceForCsv = uid,price,total_price,method_of_payment,interests,expectations,background_knowledge,known_from,notes

	# whether to show attendances on the registration queue in the CSV export or not
	showAttendancesOnRegistrationQueueInCSV = 0


	# whether to send a cancelation deadline reminder to the organizers
	sendCancelationDeadlineReminder = 0

	# how many days before an events' begin date the organizers should be reminded about this event via e-mail, zero disables the reminder
	sendEventTakesPlaceReminderDaysBeforeBeginDate = 0


	# The following variables don't have any default values provided.
	# You need to set them yourself for this extension to work correctly.

	# PID of the page (or system folder) where event registrations (attendances) will be stored
	attendancesPID =
}

plugin.tx_seminars_pi1 {
	# Do not touch this variable! This is needed for checking whether this static template has been included correctly.
	isStaticTemplateLoaded = 1

	# Set this to 0 if you don't use the registration feature for this site and would like to disable the configuration check for this.
	enableRegistration = 1

	# number of clicks to registration (valid options are 2 or 3)
	numberOfClicksForRegistration = 3

	# location of the HTML template file
	templateFile = EXT:seminars/pi1/seminars_pi1.tmpl

	# location of the template file for the registration form
	registrationEditorTemplateFile = EXT:seminars/pi1/registration_editor.html

	# whether to use formal or informal language
	salutation = formal

	# CSS class around the table with the events list view (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_eventlist = listrow

	# CSS class around the selector widget (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_selectorwidget = selectorwidget

	# CSS class around the table with the events list view (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_categorylist = categorylist

	# CSS class for the TR with the header row for the events list (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_headerrow =

	# CSS classes for the TH of the various columns in the events list (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_headercategory =
	class_headertitle = title
	class_headersubtitle =
	class_headeruid =
	class_headerevent_type =
	class_headeraccreditation_number =
	class_headercredit_points =
	class_headerteaser =
	class_headerspeakers =
	class_headerlanguage =
	class_headerdate =
	class_headertime =
	class_headerexpiry = expiry
	class_headerplace =
	class_headercity =
	class_headercountry =
	class_headerseats = seats
	class_headerprice_regular =
	class_headerprice_special =
	class_headertotal_price = total-price
	class_headerorganizers =
	class_headertarget_groups =
	class_headervacancies =
	class_headerstatus_registration =
	class_headerregistration = registration
	class_headerlist_registrations = list-registrations
	class_headeredit =
	class_headerregistrations =

	# CSS class for the TR for an item row in the events list (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_itemrow =

	# CSS classes for the TD of the various columns in the events list (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_listimage =
	class_listcategory =
	class_listtitle = title
	class_listsubtitle =
	class_listuid = uid
	class_listevent_type =
	class_listaccreditation_number =
	class_listcredit_points =
	class_listteaser =
	class_listspeakers =
	class_listlanguage =
	class_listdate = date
	class_listtime =
	class_listexpiry = expiry
	class_listplace =
	class_listcity =
	class_listcountry =
	class_listseats = seats
	class_listprice_regular = price
	class_listprice_special = price
	class_listtotal_price =
	class_listorganizers =
	class_listtarget_groups =
	class_liststatus_registration =
	class_listregistration =
	class_listlist_registrations =
	class_listedit =
	class_listregistrations =

	# CSS class for the colored square indicating the number of vacancies (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_square = square

	# CSS classes for the registration page (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_error = error

	# CSS class around the table with the category list view (will be automatically prefixed with "tx-seminars-pi1-"), leave empty to set no CSS class
	class_categorylist = categorylist

	# the PID of a fixed event that should be shown in a detailed view
	showSingleEvent =

	# the time-frame from which events should be displayed in the list view
	timeframeInList = currentAndUpcoming

	# comma-separated list of column names that shouldn't be displayed in the list view, e.g. organizers,price_special
	hideColumns = image,category,subtitle,event_type,accreditation_number,credit_points,teaser,time,expiry,place,city,country,price_special,speakers,language,target_groups

	# comma-separated list of field names that shouldn't be displayed in the detail view, e.g. organizers,price_special
	hideFields = credit_points,eventsnextday

	# whether the selector widget should be hidden in list view
	hideSelectorWidget = 0

	# whether the option boxes in the selector widget contain an empty entry like "not selected"
	showEmptyEntryInOptionLists = 0

	# whether the search form should be hidden in list view (hides the text-search field within the selector widget)
	hideSearchForm = 0

	# whether the page browser should be hidden in list view
	hidePageBrowser = 0

	# whether canceled events should be hidden or not
	hideCanceledEvents = 0

	# comma-separated list of event types UIDs to filter the list view for,
	# leave empty to have no such filter
	limitListViewToEventTypes =

	# comma-separated list of category UIDs to filter the list view for, leave
	# empty to have no such filter
	limitListViewToCategories =

	# comma-separated list of place UIDs to filter the list view for, leave
	# empty to have no such filter
	limitListViewToPlaces =

	# the maximum height of the image of a seminar in the list view
	seminarImageListViewHeight = 43

	# the maximum width of the image of a seminar in the list view
	seminarImageListViewWidth = 70

	# whether the list view should always be sorted by category (before applying
	# the normal sorting)
	sortListViewByCategory = 0

	# how to display the categories in the event list view: icon, text, both
	categoriesInListView = both

	# whether to use the label "Price" as column header for the standard price (instead of "Standard price")
	generalPriceInList = 0

	# whether to use the label "Price" as heading for the standard price (instead of "Standard price") in the detailed view and on the registration page
	generalPriceInSingle = 0

	# whether to omit the date in the list view if it is the same as the previous item's
	omitDateIfSameAsPrevious = 0

	# whether to show the owner data in the single view
	showOwnerDataInSingleView = 0

	# the maximum width of the owner picture in the single view
	ownerPictureMaxWidth = 250

	# whether to allow the CSV export in the "my editable events" view
	allowCsvExportOfRegistrationsInMyVipEventsView = 0

	# whether managers may edit their events
	mayManagersEditTheirEvents = 0

	# list of comma-separated names of event fields that should be displayed on the registration page (the order doesn't matter)
	eventFieldsOnRegistrationPage = title,price_regular,price_special,vacancies

	# list of tx_seminars_attendances DB fields to show for the online registration (must not be empty)
	showRegistrationFields = step_counter,price,method_of_payment,lodgings,foods,checkboxes,interests,expectations,background_knowledge,known_from,notes,feuser_data,billing_address,registration_data,terms_2

	# the displayed number of the first registration page (for "step x of y")
	numberOfFirstRegistrationPage = 1

	# the displayed number of the last registration page (for "step x of y")
	numberOfLastRegistrationPage = 2

	# whether detailed information for the speakers is shown in the single view
	showSpeakerDetails = 1

	# whether detailed information for the locations is shown in the single view
	showSiteDetails = 1

	# whether file downloads are limited to attendees only in the single view
	limitFileDownloadToAttendees = 1

	# comma-separated list of FEuser fields to show in the list of registrations for an event
	showFeUserFieldsInRegistrationsList = name

	# comma-separated list of registration fields to show in the list of registrations for an event
	showRegistrationFieldsInRegistrationList =

	# whether one-time FE users will be automatically logged out after registering for an event
	logOutOneTimeAccountsAfterRegistration = 1


	# The following variables don't have any default values provided.
	# You need to set them yourself for this extension to work correctly.

	# PID of the sysfolder that contains all the event records (e.g. the starting point)
	pages =

	# number of levels to recurse when accessing the starting point
	recursive =

	# PID of the page that contains the seminar list
	listPID =

	# PID of the page that contains the detailed view
	detailPID =

	# PID of the page that contains the "my events" list
	myEventsPID =

	# PID of the page that contains the seminar registration plug-in
	registerPID =

	# PID of the thank-you page that will be displayed after a FE user has registered for an event
	thankYouAfterRegistrationPID =

	# Wether to send GET parameters to the thank-you-after-registration-page-URL.
	sendParametersToThankYouAfterRegistrationPageUrl = 1

	# PID of the thank-you page that will be displayed after a FE user has unregistered from an event
	pageToShowAfterUnregistrationPID =

	# Wether to send GET parameters to the thank-you-after-registration-page-URL.
	sendParametersToPageToShowAfterUnregistrationUrl = 1

	# PID of the page that contains the login form
	loginPID =

	# PID of the page that contains the registrations list for participants
	registrationsListPID =

	# PID of the page that contains the registrations list for event managers
	registrationsVipListPID =

	# UID of the FE user group that is allowed to enter and edit event records in the FE
	eventEditorFeGroupID =

	# UID of the FE user group for event managers
	defaultEventVipsFeGroupID =

	# PID of the page where the plug-in for editing events is located
	eventEditorPID =

	# PID of the sysfolder where FE-created events will be stored
	createEventsPID =

	# PID of the page that will be shown when an event has been successfully entered on the FE
	eventSuccessfullySavedPID =

	# comma-separated list of file extensions which are allowed to be uploaded
	allowedExtensionsForUpload = jpg,jpeg,png,bmp,gif,tiff,tif,txt,pdf,ps,svg,doc,docx,sxw,odt,xls,xlsx,sxc,ods,ppt,pptx,sxi,odp,html,htm,css,js,xml,xsd,zip,rar,gz,tgz,tar,bz2,tbz,tbz2

	# UID of the payment method that corresponds to "bank transfer"
	bankTransferUID =

	# The target for external links in seminars.
	externalLinkTarget =

	# the maximum width of the image of a seminar in the single view
	seminarImageSingleViewWidth = 260

	# the maximum height of the image of a seminar in the single view
	seminarImageSingleViewHeight = 160

	form {
		eventEditor {
			meta {
				name = Seminar Manager FE Editor
				description = This editor provides a FE editing feature for events.
				form.formid = tx_seminars_pi1_seminars
				debug = false
				displaylabels = true
			}
			control {
				datahandler = datahandler:DBMM
				datahandler {
					tablename = tx_seminars_seminars
					keyname = uid
					labelname = title
					mmrelations {
						1 {
							field = categories
							mmtable = tx_seminars_seminars_categories_mm
						}
						2 {
							field = place
							mmtable = tx_seminars_seminars_place_mm
						}
						3 {
							field = lodgings
							mmtable = tx_seminars_seminars_lodgings_mm
						}
						4 {
							field = foods
							mmtable = tx_seminars_seminars_foods_mm
						}
						5 {
							field = speakers
							mmtable = tx_seminars_seminars_speakers_mm
						}
						6 {
							field = partners
							mmtable = tx_seminars_seminars_speakers_mm_partners
						}
						7 {
							field = tutors
							mmtable = tx_seminars_seminars_speakers_mm_tutors
						}
						8 {
							field = leaders
							mmtable = tx_seminars_seminars_speakers_mm_leaders
						}
						9 {
							field = target_groups
							mmtable = tx_seminars_seminars_target_groups_mm
						}
						10 {
							field = organizers
							mmtable = tx_seminars_seminars_organizers_mm
						}
					}
					process.beforeinsertion.userobj {
						extension = this
						method = modifyDataToInsert
					}
				}
				renderer = renderer:TEMPLATE
				renderer.template {
					path.userobj {
						extension = this
						method = getTemplatePath
					}
					subpart = ###seminars_FORM###
					errortag = errors
				}
				actionlets {
					10 = actionlet:REDIRECT
					10.url.userobj {
						extension = this
						method = getEventSuccessfullySavedUrl
					}
				}
			}
			elements {
				10 = renderlet:TEXT
				10 {
					name = title
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.title
					validators {
						10 = validator:STANDARD
						10.required.message = LLL:EXT:seminars/pi1/locallang.xml:message_emptyTitle
					}
				}

				20 = renderlet:TEXT
				20 {
					name = subtitle
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.subtitle
				}

				30 = renderlet:CHECKBOX
				30 {
					name = categories
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.categories
					data.userobj {
						extension = this
						method = populateListCategories
					}
				}

				40 = renderlet:TEXTAREA
				40 {
					name = teaser
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.teaser
				}

				50 = renderlet:TEXTAREA
				50 {
					name = description
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.description
				}

				60 = renderlet:LISTBOX
				60 {
					name = event_type
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.event_type
					data {
						items {
							10.name = &amp;nbsp;
							10.value = 0
						}
						userobj {
							extension = this
							method = populateListEventTypes
						}
					}
				}

				70 = renderlet:TEXT
				70 {
					name = accreditation_number
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.accreditation_number
				}

				80 = renderlet:TEXT
				80 {
					name = credit_points
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.credit_points
				}

				90 = renderlet:DATE
				90 {
					name = begin_date
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.begin_date
					data.datetime {
						format = %H:%M %d-%m-%Y
						displaytime = true
						converttotimestamp = true
						allowmanualedition = true
					}
				}

				100 = renderlet:DATE
				100 {
					name = end_date
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.end_date
					data.datetime {
						format = %H:%M %d-%m-%Y
						displaytime = true
						converttotimestamp = true
						allowmanualedition = true
					}
				}

				110 = renderlet:DATE
				110 {
					name = deadline_registration
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.deadline_registration
					data.datetime {
						format = %H:%M %d-%m-%Y
						displaytime = true
						converttotimestamp = true
						allowmanualedition = true
					}
				}

				120 = renderlet:DATE
				120 {
					name = deadline_early_bird
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.deadline_early_bird
					data.datetime {
						format = %H:%M %d-%m-%Y
						displaytime = true
						converttotimestamp = true
						allowmanualedition = true
					}
				}

				130 = renderlet:DATE
				130 {
					name = deadline_unregistration
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.deadline_unregistration
					data.datetime {
						format = %H:%M %d-%m-%Y
						displaytime = true
						converttotimestamp = true
						allowmanualedition = true
					}
				}

				140 = renderlet:CHECKBOX
				140 {
					name = place
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.place
					data.userobj {
						extension = this
						method = populateListPlaces
					}
				}

				150 = renderlet:TEXT
				150 {
					name = room
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.room
				}

				160 = renderlet:TEXTAREA
				160 {
					name = additional_times_places
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.additional_times_places
				}

				170 = renderlet:CHECKBOX
				170 {
					name = lodgings
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.lodgings
					data.userobj {
						extension = this
						method = populateListLodgings
					}
				}

				180 = renderlet:CHECKBOX
				180 {
					name = foods
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.foods
					data.userobj {
						extension = this
						method = populateListFoods
					}
				}

				190 = renderlet:CHECKBOX
				190 {
					name = speakers
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.speakers
					data.userobj {
						extension = this
						method = populateListSpeakers
					}
				}

				200 = renderlet:CHECKBOX
				200 {
					name = partners
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.partners
					data.userobj {
						extension = this
						method = populateListSpeakers
					}
				}

				210 = renderlet:CHECKBOX
				210 {
					name = tutors
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.tutors
					data.userobj {
						extension = this
						method = populateListSpeakers
					}
				}

				220 = renderlet:CHECKBOX
				220 {
					name = leaders
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.leaders
					data.userobj {
						extension = this
						method = populateListSpeakers
					}
				}

				230 = renderlet:TEXT
				230 {
					name = price_regular
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_regular
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				240 = renderlet:TEXT
				240 {
					name = price_regular_early
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_regular_early
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				250 = renderlet:TEXT
				250 {
					name = price_regular_board
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_regular_board
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				260 = renderlet:TEXT
				260 {
					name = price_special
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_special
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				270 = renderlet:TEXT
				270 {
					name = price_special_early
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_special_early
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				280 = renderlet:TEXT
				280 {
					name = price_special_board
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.price_special_board
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*((\.|,)[\d]{1,2})?$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noPriceNumber
						}
					}
				}

				290 = renderlet:TEXTAREA
				290 {
					name = additional_information
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.additional_information
				}

				300 = renderlet:CHECKBOX
				300 {
					name = checkboxes
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.checkboxes
					data.userobj {
						extension = this
						method = populateListCheckboxes
					}
				}

				310 = renderlet:CHECKBOX
				310 {
					name = payment_methods
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.payment_methods
					data.userobj {
						extension = this
						method = populateListPaymentMethods
					}
				}

				320 = renderlet:CHECKBOX
				320 {
					name = organizers
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.organizers
					data.userobj {
						extension = this
						method = populateListOrganizers
					}
					validators {
						10 = validator:STANDARD
						10.userobj {
							message = LLL:EXT:seminars/pi1/locallang.xml:message_emptyOrganizer
							php (
								$value = array_pop(func_get_args());
								return (!empty($value));
							)
						}
					}
				}

				325 = renderlet:CHECKSINGLE
				325 {
					name = needs_registration
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.needs_registration
				}

				330 = renderlet:CHECKSINGLE
				330 {
					name = allows_multiple_registrations
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.allows_multiple_registrations
				}

				340 = renderlet:TEXT
				340 {
					name = attendees_min
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.attendees_min
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noAttendeesNumber
						}
					}
				}

				350 = renderlet:TEXT
				350 {
					name = attendees_max
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.attendees_max
					validators {
						10 = validator:PREG
						10.pattern {
							value = /^[\d]*$/
							message = LLL:EXT:seminars/pi1/locallang.xml:message_noAttendeesNumber
						}
					}
				}

				360 = renderlet:CHECKSINGLE
				360 {
					name = queue_size
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.queue_size
				}

				370 = renderlet:CHECKBOX
				370 {
					name = target_groups
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.target_groups
					data.userobj {
						extension = this
						method = populateListTargetGroups
					}
				}

				380 = renderlet:LISTBOX
				380 {
					name = cancelled
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.cancelled
					data.items {
						10 {
							caption = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.cancelled_planned
							value = 0
						}
						20 {
							caption = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.cancelled_canceled
							value = 1
						}
						30 {
							caption = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.cancelled_confirmed
							value = 2
						}
					}
				}

				390 = renderlet:CHECKSINGLE
				390 {
					name = uses_terms_2
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.uses_terms_2
				}

				400 = renderlet:TEXTAREA
				400 {
					name = notes
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.notes
				}

				410 = renderlet:UPLOAD
				410 {
					name = attached_files
					label = LLL:EXT:seminars/locallang_db.xml:tx_seminars_seminars.attached_files
					data {
						targetdir = uploads/tx_seminars/
						multiple = 1
					}
					validators {
						10 = validator:STANDARD
						10.userobj {
							extension = this
							method = checkFile
							message.userobj {
								extension = this
								method = getFileUploadErrorMessage
							}
						}
					}
				}

				420 = renderlet:HIDDEN
				420 {
					name = delete_attached_files
					data.defaultvalue =
				}

				430 = renderlet:SUBMIT
				430 {
					name = submit_and_stay
					label = ###LABEL_SAVE###
					onclick (
						document.getElementById("tx_seminars_pi1_seminars_proceed_file_upload").value = 1
					)
				}

				440 = renderlet:SUBMIT
				440 {
					name = btnsubmit
					label = ###LABEL_SAVE_AND_BACK###
				}

				450 = renderlet:HIDDEN
				450 {
					name = proceed_file_upload
				}
			}
		}

		registration {
			step1 {
				meta {
					name = Seminar Manager registration form
					description = This form allows FE users to register for events.
					form.formid = tx_seminars_pi1_registration_editor
					debug = false
					displaylabels = false
				}
				control {
					datahandler = datahandler:RAW
					datahandler.parentcallback = setPage

					renderer = renderer:TEMPLATE
					renderer.template {
						path.userobj {
							extension = this
							method = getTemplatePath
						}
						subpart = ###REGISTRATION_EDITOR_STEP_1###
						errortag = errors
					}
				}
				elements {
					10 = renderlet:LABEL
					10 {
						name = step_counter
						data.value.userobj {
							extension = this
							method = getStepCounter
						}
					}

					20 = renderlet:LABEL
					20 {
						name = feuser_data
						data.value.userobj {
							extension = this
							method = getAllFeUserData
						}
					}

					30 = renderlet:LISTBOX
					30 {
						name = price
						data.userobj {
							extension = this
							method = populatePrices
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isValidPriceSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_choosePrice
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = price
							}
						}
					}

					40 = renderlet:RADIOBUTTON
					40 {
						name = method_of_payment
						data {
							userobj {
								extension = this
								method = populateListPaymentMethods
							}
							defaultvalue.userobj {
								extension = this
								method = getPreselectedPaymentMethod
							}
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isMethodOfPaymentSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_chooseMethodOfPayment
							}
						}
						process.userobj {
							extension = this
							method = showMethodsOfPayment
						}
					}

					50 = renderlet:TEXT
					50 {
						name = account_number
						data {
							defaultvalue.userobj {
								extension = this
								method = retrieveDataFromSession
								params {
									10.name = key
									10.value = account_number
								}
							}
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = account_number
							}
						}
					}

					60 = renderlet:TEXT
					60 {
						name = bank_code
						data {
							defaultvalue.userobj {
								extension = this
								method = retrieveDataFromSession
								params {
									10.name = key
									10.value = bank_code
								}
							}
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = bank_code
							}
						}
					}

					70 = renderlet:TEXT
					70 {
						name = bank_name
						data {
							defaultvalue.userobj {
								extension = this
								method = retrieveDataFromSession
								params {
									10.name = key
									10.value = bank_name
								}
							}
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = bank_name
							}
						}
					}

					80 = renderlet:TEXT
					80 {
						name = account_owner
						data {
							defaultvalue.userobj {
								extension = this
								method = retrieveDataFromSession
								params {
									10.name = key
									10.value = account_owner
								}
							}
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = account_owner
							}
						}
					}

					90 = renderlet:LISTBOX
					90 {
						name = gender
						data {
							items {
								10 {
									caption = LLL:EXT:seminars/locallang_db.xml:tx_seminars_attendances.gender.I.0
									value = 0
								}
								20 {
									caption = LLL:EXT:seminars/locallang_db.xml:tx_seminars_attendances.gender.I.1
									value = 1
								}
							}
							defaultvalue {
								extension = this
								method = getFeUserData
								params {
									10.name = key
									10.value = gender
								}
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = gender
							}
						}
					}

					100 = renderlet:TEXT
					100 {
						name = name
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = name
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = name
							}
						}
					}

					110 = renderlet:TEXTAREA
					110 {
						name = address
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = address
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = address
							}
						}
					}

					120 = renderlet:TEXT
					120 {
						name = zip
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = zip
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = zip
							}
						}
					}

					130 = renderlet:TEXT
					130 {
						name = city
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = city
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = city
							}
						}
					}

					140 = renderlet:LISTBOX
					140 {
						name = country
						data {
							userobj {
								extension = this
								method = populateListCountries
							}
							defaultvalue.userobj {
								extension = this
								method = getFeUserData
								params {
									10.name = key
									10.value = country
								}
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = country
							}
						}
					}

					150 = renderlet:TEXT
					150 {
						name = telephone
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = telephone
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = telephone
							}
						}
					}

					160 = renderlet:TEXT
					160 {
						name = email
						data.defaultvalue.userobj {
							extension = this
							method = getFeUserData
							params {
								10.name = key
								10.value = email
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = email
							}
						}
					}

					170 = renderlet:LISTBOX
					170 {
						name = seats
						data {
							items {
								1 {
									caption = 1
									value = 1
								}
								2 {
									caption = 2
									value = 2
								}
								3 {
									caption = 3
									value = 3
								}
								4 {
									caption = 4
									value = 4
								}
								5 {
									caption = 5
									value = 5
								}
								6 {
									caption = 6
									value = 6
								}
								7 {
									caption = 7
									value = 7
								}
								8 {
									caption = 8
									value = 8
								}
								9 {
									caption = 9
									value = 9
								}
								10 {
									caption = 10
									value = 10
								}
								11 {
									caption = 11
									value = 11
								}
								12 {
									caption = 12
									value = 12
								}
								13 {
									caption = 13
									value = 13
								}
								14 {
									caption = 14
									value = 14
								}
								15 {
									caption = 15
									value = 15
								}
								16 {
									caption = 16
									value = 16
								}
								17 {
									caption = 17
									value = 17
								}
								18 {
									caption = 18
									value = 18
								}
								19 {
									caption = 19
									value = 19
								}
								20 {
									caption = 20
									value = 20
								}
							}
							defaultvalue = 1
						}
						validators {
							10 = validator:PREG
							10.pattern {
								value = /^[\d]*$/
								message = LLL:EXT:seminars/pi1/locallang.xml:message_noSeatsNumber
							}

							20 = validator:STANDARD
							20.userobj {
								extension = this
								method = canRegisterSeats
								message = LLL:EXT:seminars/pi1/locallang.xml:message_invalidNumberOfSeats
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = seats
							}
						}
					}

					180 = renderlet:TEXTAREA
					180 {
						name = attendees_names
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasAttendeesNames
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideAttendeesNames
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = attendees_names
							}
						}
					}

					190 = renderlet:LISTBOX
					190 {
						name = kids
						data.items {
							1 {
								caption = 1
								value = 1
							}
							2 {
								caption = 2
								value = 2
							}
							3 {
								caption = 3
								value = 3
							}
							4 {
								caption = 4
								value = 4
							}
							5 {
								caption = 5
								value = 5
							}
						}
						validators {
							10 = validator:PREG
							10.pattern {
								value = /^[\d]*$/
								message = LLL:EXT:seminars/pi1/locallang.xml:message_noKidsNumber
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = kids
							}
						}
					}

					200 = renderlet:CHECKBOX
					200 {
						name = lodgings
						data.userobj {
							extension = this
							method = populateLodgings
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isLodgingSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_selectLodging
							}
						}
						process.userobj {
							extension = this
							method = hasLodgings
						}
					}

					210 = renderlet:TEXTAREA
					210 {
						name = accommodation
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = accommodation
							}
						}
					}

					220 = renderlet:CHECKBOX
					220 {
						name = foods
						data.userobj {
							extension = this
							method = populateFoods
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isFoodSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_selectFood
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = foods
							}
						}
					}

					230 = renderlet:TEXTAREA
					230 {
						name = food
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = food
							}
						}
					}

					240 = renderlet:CHECKBOX
					240 {
						name = checkboxes
						data.userobj {
							extension = this
							method = populateCheckboxes
						}
						process.userobj {
							extension = this
							method = hasCheckboxes
						}
					}

					250 = renderlet:TEXTAREA
					250 {
						name = interests
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = interests
							}
						}
					}

					260 = renderlet:TEXTAREA
					260 {
						name = expectations
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = expectations
							}
						}
					}

					270 = renderlet:TEXTAREA
					270 {
						name = background_knowledge
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = background_knowledge
							}
						}
					}

					280 = renderlet:TEXTAREA
					280 {
						name = known_from
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = known_from
							}
						}
					}

					290 = renderlet:TEXTAREA
					290 {
						name = notes
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = notes
							}
						}
					}

					300 = renderlet:SUBMIT
					300 {
						name = button_continue
						label = ###LABEL_PROCEED_REGISTRATION###
					}

					310 = renderlet:SUBMIT
					310 {
						name = button_submit
						label = ###LABEL_SUBMIT_REGISTRATION###
						onclick {
							runat = server
							submit = full
							userobj.php (
								if ($this->_oParent->getFormCreator()->oDataHandler->_allIsValid()) {
									$this->_oParent->currentPageNumber = 2;
								}
							)
						}
					}

					320 = renderlet:PASSTHRU
					320 {
						name = next_page
						data.value = 1
					}
				}
			}
			step2 {
				meta {
					name = Seminar Manager registration form
					description = This form allows FE users to register for events.
					form.formid = tx_seminars_pi1_registration_editor
					debug = false
					displaylabels = false
				}
				control {
					datahandler = datahandler:RAW
					datahandler.parentcallback = processRegistration

					renderer = renderer:TEMPLATE
					renderer.template {
						path.userobj {
							extension = this
							method = getTemplatePath
						}
						subpart = ###REGISTRATION_EDITOR_STEP_2###
						errortag = errors
					}

					actionlets {
						10 = actionlet:REDIRECT
						10.url.userobj {
							extension = this
							method = getThankYouAfterRegistrationUrl
						}
					}
				}
				elements {
					10 = renderlet:LABEL
					10 {
						name = step_counter
						data.value.userobj {
							extension = this
							method = getStepCounter
						}
					}

					20 = renderlet:LABEL
					20 {
						name = billing_address
						data.value.userobj {
							extension = this
							method = getBillingAddress
						}
					}

					30 = renderlet:LABEL
					30 {
						name = registration_data
						data.value.userobj {
							extension = this
							method = getRegistrationData
						}
					}

					40 = renderlet:CHECKSINGLE
					40 {
						name = terms
						label = ###LABEL_TERMS###
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isTermsChecked
								message = LLL:EXT:seminars/pi1/locallang.xml:message_acceptTerms
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = terms
							}
						}
					}

					50 = renderlet:CHECKSINGLE
					50 {
						name = terms_2
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isTerms2CheckedAndEnabled
								message = LLL:EXT:seminars/pi1/locallang.xml:message_acceptTerms2
							}
						}
						process.userobj {
							extension = this
							method = isTerms2Enabled
							params {
								10.name = elementname
								10.value = terms_2
							}
						}
					}

					60 = renderlet:SUBMIT
					60 {
						name = button_back
						refresh =
						label = ###LABEL_BACK_REGISTRATION###
					}

					70 = renderlet:SUBMIT
					70 {
						name = button_submit
						label = ###LABEL_SUBMIT_REGISTRATION###
						onclick {
							runat = server
							submit = full
							userobj.php (
								$this->_oParent->currentPageNumber = 2;
							)
						}
					}

					80 = renderlet:HIDDEN
					80 {
						name = price
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isValidPriceSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_choosePrice
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = price
							}
						}
					}

					90 = renderlet:HIDDEN
					90 {
						name = method_of_payment
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isMethodOfPaymentSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_chooseMethodOfPayment
							}
						}
						process.userobj {
							extension = this
							method = showMethodsOfPayment
						}
					}

					100 = renderlet:HIDDEN
					100 {
						name = account_number
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = account_number
							}
						}
					}

					110 = renderlet:HIDDEN
					110 {
						name = bank_code
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = bank_code
							}
						}
					}

					120 = renderlet:HIDDEN
					120 {
						name = bank_name
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = bank_name
							}
						}
					}

					130 = renderlet:HIDDEN
					130 {
						name = account_owner
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasBankData
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideBankData
							}
						}
						process.userobj {
							extension = this
							method = hasBankDataFormField
							params {
								10.name = elementname
								10.value = account_owner
							}
						}
					}

					140 = renderlet:HIDDEN
					140 {
						name = gender
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = gender
							}
						}
					}

					150 = renderlet:HIDDEN
					150 {
						name = name
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = name
							}
						}
					}

					160 = renderlet:HIDDEN
					160 {
						name = address
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = address
							}
						}
					}

					170 = renderlet:HIDDEN
					170 {
						name = zip
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = zip
							}
						}
					}

					180 = renderlet:HIDDEN
					180 {
						name = city
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = city
							}
						}
					}

					190 = renderlet:HIDDEN
					190 {
						name = country
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = country
							}
						}
					}

					200 = renderlet:HIDDEN
					200 {
						name = telephone
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = telephone
							}
						}
					}

					210 = renderlet:HIDDEN
					210 {
						name = email
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = email
							}
						}
					}

					220 = renderlet:HIDDEN
					220 {
						name = seats
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = canRegisterSeats
								message = LLL:EXT:seminars/pi1/locallang.xml:message_invalidNumberOfSeats
							}
							20 = validator:PREG
							20.pattern {
								value = /^[\d]*$/
								message = LLL:EXT:seminars/pi1/locallang.xml:message_noSeatsNumber
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = seats
							}
						}
					}

					230 = renderlet:HIDDEN
					230 {
						name = attendees_names
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = hasAttendeesNames
								message = LLL:EXT:seminars/pi1/locallang.xml:message_provideAttendeesNames
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = attendees_names
							}
						}
					}

					240 = renderlet:HIDDEN
					240 {
						name = kids
						validators {
							10 = validator:PREG
							10.pattern {
								value = /^[\d]*$/
								message = LLL:EXT:seminars/pi1/locallang.xml:message_noKidsNumber
							}
						}
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = kids
							}
						}
					}

					250 = renderlet:CHECKBOX
					250 {
						name = lodgings
						data.userobj {
							extension = this
							method = populateLodgings
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isLodgingSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_selectLodging
							}
						}
						process.userobj {
							extension = this
							method = hasLodgings
						}
					}

					260 = renderlet:HIDDEN
					260 {
						name = accommodation
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = accommodation
							}
						}
					}

					270 = renderlet:CHECKBOX
					270 {
						name = foods
						data.userobj {
							extension = this
							method = populateFoods
						}
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isFoodSelected
								message = LLL:EXT:seminars/pi1/locallang.xml:message_selectFood
							}
						}
						process.userobj {
							extension = this
							method = hasFoods
						}
					}

					280 = renderlet:HIDDEN
					280 {
						name = food
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = food
							}
						}
					}

					290 = renderlet:CHECKBOX
					290 {
						name = checkboxes
						data.userobj {
							extension = this
							method = populateCheckboxes
						}
						process.userobj {
							extension = this
							method = hasCheckboxes
						}
					}

					300 = renderlet:HIDDEN
					300 {
						name = interests
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = interests
							}
						}
					}

					310 = renderlet:HIDDEN
					310 {
						name = expectations
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = expectations
							}
						}
					}

					320 = renderlet:HIDDEN
					320 {
						name = background_knowledge
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = background_knowledge
							}
						}
					}

					330 = renderlet:HIDDEN
					330 {
						name = known_from
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = known_from
							}
						}
					}

					340 = renderlet:HIDDEN
					340 {
						name = notes
						process.userobj {
							extension = this
							method = hasRegistrationFormField
							params {
								10.name = elementname
								10.value = notes
							}
						}
					}

					350 = renderlet:HIDDEN
					350 {
						name = next_page
						validators {
							10 = validator:STANDARD
							10.userobj {
								extension = this
								method = isLastPage
							}
						}
					}
				}
			}
		}

		unregistration {
			meta {
				name = Seminar Manager unregistration form
				description = This form allows FE users to unregister for events.
				form.formid = tx_seminars_pi1_registration_editor
				debug = false
				displaylabels = false
			}
			control {
				datahandler = datahandler:RAW
				datahandler.parentcallback = processUnregistration

				renderer = renderer:TEMPLATE
				renderer.template {
					path.userobj {
						extension = this
						method = getTemplatePath
					}
					subpart = ###REGISTRATION_EDITOR_UNREGISTRATION###
					errortag = errors
				}

				actionlets {
					10 = actionlet:REDIRECT
					10.url.userobj {
						extension = this
						method = getPageToShowAfterUnregistrationUrl
					}
				}
			}
			elements {
				10 = renderlet:SUBMIT
				10 {
					name = button_cancel
					label = ###LABEL_CANCEL###
					onclick {
						runat = server
						userobj.php = header('Location:' . $this->_oParent->plugin->pi_getPageLink($this->_oParent->getConfValueInteger('myEventsPID')));
					}
				}

				20 = renderlet:SUBMIT
				20 {
					name = button_unregister
					label = ###LABEL_UNREGISTER###
				}
			}
		}
	}
}


plugin.tx_seminars_pi1.listView {
	# the default sort order in list view (a sort field name)
	orderBy = date

	# whether to order ascending (0) or descending (1)
	descFlag = 0

	# how many results to display per page
	results_at_a_time = 20

	# the number of neighboring pages to list in the page browser
	maxPages = 5
}


tx_seminars_pi2 = PAGE
tx_seminars_pi2 {
	# Just some random non-zero number.
	typeNum = {$plugin.tx_seminars_pi2.typeNumForCsv}

	config {
		disableCharsetHeader = 1
		enableContentLengthHeader = 0
		no_cache = 1
		disableAllHeaderCode = 1
		admPanel = 0

		xhtml_cleaning >
	}

	includeLibs.tx_seminars_pi2 = EXT:seminars/pi2/class.tx_seminars_pi2.php

	10 = USER
	10 {
		userFunc = tx_seminars_pi2->main

		# pro forma salutation mode for the FE; has no effect whatsoever
		salutation = formal
	}
}


page.includeCSS {
	tx_seminars_pi1 = {$plugin.tx_seminars_pi1.cssFile}
}
